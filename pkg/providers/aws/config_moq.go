// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aws

import (
	"context"
	"sync"
)

var (
	lockConfigManagerMockGetDefaultRegionSMTPServerMapping sync.RWMutex
	lockConfigManagerMockReadBlobStorageStrategy           sync.RWMutex
	lockConfigManagerMockReadSMTPCredentialSetStrategy     sync.RWMutex
)

// Ensure, that ConfigManagerMock does implement ConfigManager.
// If this is not the case, regenerate this file with moq.
var _ ConfigManager = &ConfigManagerMock{}

// ConfigManagerMock is a mock implementation of ConfigManager.
//
//     func TestSomethingThatUsesConfigManager(t *testing.T) {
//
//         // make and configure a mocked ConfigManager
//         mockedConfigManager := &ConfigManagerMock{
//             GetDefaultRegionSMTPServerMappingFunc: func() map[string]string {
// 	               panic("mock out the GetDefaultRegionSMTPServerMapping method")
//             },
//             ReadBlobStorageStrategyFunc: func(ctx context.Context, tier string) (*StrategyConfig, error) {
// 	               panic("mock out the ReadBlobStorageStrategy method")
//             },
//             ReadSMTPCredentialSetStrategyFunc: func(ctx context.Context, tier string) (*StrategyConfig, error) {
// 	               panic("mock out the ReadSMTPCredentialSetStrategy method")
//             },
//         }
//
//         // use mockedConfigManager in code that requires ConfigManager
//         // and then make assertions.
//
//     }
type ConfigManagerMock struct {
	// GetDefaultRegionSMTPServerMappingFunc mocks the GetDefaultRegionSMTPServerMapping method.
	GetDefaultRegionSMTPServerMappingFunc func() map[string]string

	// ReadBlobStorageStrategyFunc mocks the ReadBlobStorageStrategy method.
	ReadBlobStorageStrategyFunc func(ctx context.Context, tier string) (*StrategyConfig, error)

	// ReadSMTPCredentialSetStrategyFunc mocks the ReadSMTPCredentialSetStrategy method.
	ReadSMTPCredentialSetStrategyFunc func(ctx context.Context, tier string) (*StrategyConfig, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetDefaultRegionSMTPServerMapping holds details about calls to the GetDefaultRegionSMTPServerMapping method.
		GetDefaultRegionSMTPServerMapping []struct {
		}
		// ReadBlobStorageStrategy holds details about calls to the ReadBlobStorageStrategy method.
		ReadBlobStorageStrategy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tier is the tier argument value.
			Tier string
		}
		// ReadSMTPCredentialSetStrategy holds details about calls to the ReadSMTPCredentialSetStrategy method.
		ReadSMTPCredentialSetStrategy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tier is the tier argument value.
			Tier string
		}
	}
}

// GetDefaultRegionSMTPServerMapping calls GetDefaultRegionSMTPServerMappingFunc.
func (mock *ConfigManagerMock) GetDefaultRegionSMTPServerMapping() map[string]string {
	if mock.GetDefaultRegionSMTPServerMappingFunc == nil {
		panic("ConfigManagerMock.GetDefaultRegionSMTPServerMappingFunc: method is nil but ConfigManager.GetDefaultRegionSMTPServerMapping was just called")
	}
	callInfo := struct {
	}{}
	lockConfigManagerMockGetDefaultRegionSMTPServerMapping.Lock()
	mock.calls.GetDefaultRegionSMTPServerMapping = append(mock.calls.GetDefaultRegionSMTPServerMapping, callInfo)
	lockConfigManagerMockGetDefaultRegionSMTPServerMapping.Unlock()
	return mock.GetDefaultRegionSMTPServerMappingFunc()
}

// GetDefaultRegionSMTPServerMappingCalls gets all the calls that were made to GetDefaultRegionSMTPServerMapping.
// Check the length with:
//     len(mockedConfigManager.GetDefaultRegionSMTPServerMappingCalls())
func (mock *ConfigManagerMock) GetDefaultRegionSMTPServerMappingCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigManagerMockGetDefaultRegionSMTPServerMapping.RLock()
	calls = mock.calls.GetDefaultRegionSMTPServerMapping
	lockConfigManagerMockGetDefaultRegionSMTPServerMapping.RUnlock()
	return calls
}

// ReadBlobStorageStrategy calls ReadBlobStorageStrategyFunc.
func (mock *ConfigManagerMock) ReadBlobStorageStrategy(ctx context.Context, tier string) (*StrategyConfig, error) {
	if mock.ReadBlobStorageStrategyFunc == nil {
		panic("ConfigManagerMock.ReadBlobStorageStrategyFunc: method is nil but ConfigManager.ReadBlobStorageStrategy was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Tier string
	}{
		Ctx:  ctx,
		Tier: tier,
	}
	lockConfigManagerMockReadBlobStorageStrategy.Lock()
	mock.calls.ReadBlobStorageStrategy = append(mock.calls.ReadBlobStorageStrategy, callInfo)
	lockConfigManagerMockReadBlobStorageStrategy.Unlock()
	return mock.ReadBlobStorageStrategyFunc(ctx, tier)
}

// ReadBlobStorageStrategyCalls gets all the calls that were made to ReadBlobStorageStrategy.
// Check the length with:
//     len(mockedConfigManager.ReadBlobStorageStrategyCalls())
func (mock *ConfigManagerMock) ReadBlobStorageStrategyCalls() []struct {
	Ctx  context.Context
	Tier string
} {
	var calls []struct {
		Ctx  context.Context
		Tier string
	}
	lockConfigManagerMockReadBlobStorageStrategy.RLock()
	calls = mock.calls.ReadBlobStorageStrategy
	lockConfigManagerMockReadBlobStorageStrategy.RUnlock()
	return calls
}

// ReadSMTPCredentialSetStrategy calls ReadSMTPCredentialSetStrategyFunc.
func (mock *ConfigManagerMock) ReadSMTPCredentialSetStrategy(ctx context.Context, tier string) (*StrategyConfig, error) {
	if mock.ReadSMTPCredentialSetStrategyFunc == nil {
		panic("ConfigManagerMock.ReadSMTPCredentialSetStrategyFunc: method is nil but ConfigManager.ReadSMTPCredentialSetStrategy was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Tier string
	}{
		Ctx:  ctx,
		Tier: tier,
	}
	lockConfigManagerMockReadSMTPCredentialSetStrategy.Lock()
	mock.calls.ReadSMTPCredentialSetStrategy = append(mock.calls.ReadSMTPCredentialSetStrategy, callInfo)
	lockConfigManagerMockReadSMTPCredentialSetStrategy.Unlock()
	return mock.ReadSMTPCredentialSetStrategyFunc(ctx, tier)
}

// ReadSMTPCredentialSetStrategyCalls gets all the calls that were made to ReadSMTPCredentialSetStrategy.
// Check the length with:
//     len(mockedConfigManager.ReadSMTPCredentialSetStrategyCalls())
func (mock *ConfigManagerMock) ReadSMTPCredentialSetStrategyCalls() []struct {
	Ctx  context.Context
	Tier string
} {
	var calls []struct {
		Ctx  context.Context
		Tier string
	}
	lockConfigManagerMockReadSMTPCredentialSetStrategy.RLock()
	calls = mock.calls.ReadSMTPCredentialSetStrategy
	lockConfigManagerMockReadSMTPCredentialSetStrategy.RUnlock()
	return calls
}
