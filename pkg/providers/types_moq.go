// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package providers

import (
	"context"
	"github.com/integr8ly/cloud-resource-operator/pkg/apis/integreatly/v1alpha1"
	"sync"
)

var (
	lockDeploymentDetailsMockData sync.RWMutex
)

// Ensure, that DeploymentDetailsMock does implement DeploymentDetails.
// If this is not the case, regenerate this file with moq.
var _ DeploymentDetails = &DeploymentDetailsMock{}

// DeploymentDetailsMock is a mock implementation of DeploymentDetails.
//
//     func TestSomethingThatUsesDeploymentDetails(t *testing.T) {
//
//         // make and configure a mocked DeploymentDetails
//         mockedDeploymentDetails := &DeploymentDetailsMock{
//             DataFunc: func() map[string][]byte {
// 	               panic("mock out the Data method")
//             },
//         }
//
//         // use mockedDeploymentDetails in code that requires DeploymentDetails
//         // and then make assertions.
//
//     }
type DeploymentDetailsMock struct {
	// DataFunc mocks the Data method.
	DataFunc func() map[string][]byte

	// calls tracks calls to the methods.
	calls struct {
		// Data holds details about calls to the Data method.
		Data []struct {
		}
	}
}

// Data calls DataFunc.
func (mock *DeploymentDetailsMock) Data() map[string][]byte {
	if mock.DataFunc == nil {
		panic("DeploymentDetailsMock.DataFunc: method is nil but DeploymentDetails.Data was just called")
	}
	callInfo := struct {
	}{}
	lockDeploymentDetailsMockData.Lock()
	mock.calls.Data = append(mock.calls.Data, callInfo)
	lockDeploymentDetailsMockData.Unlock()
	return mock.DataFunc()
}

// DataCalls gets all the calls that were made to Data.
// Check the length with:
//     len(mockedDeploymentDetails.DataCalls())
func (mock *DeploymentDetailsMock) DataCalls() []struct {
} {
	var calls []struct {
	}
	lockDeploymentDetailsMockData.RLock()
	calls = mock.calls.Data
	lockDeploymentDetailsMockData.RUnlock()
	return calls
}

var (
	lockBlobStorageProviderMockCreateStorage    sync.RWMutex
	lockBlobStorageProviderMockDeleteStorage    sync.RWMutex
	lockBlobStorageProviderMockGetName          sync.RWMutex
	lockBlobStorageProviderMockSupportsStrategy sync.RWMutex
)

// Ensure, that BlobStorageProviderMock does implement BlobStorageProvider.
// If this is not the case, regenerate this file with moq.
var _ BlobStorageProvider = &BlobStorageProviderMock{}

// BlobStorageProviderMock is a mock implementation of BlobStorageProvider.
//
//     func TestSomethingThatUsesBlobStorageProvider(t *testing.T) {
//
//         // make and configure a mocked BlobStorageProvider
//         mockedBlobStorageProvider := &BlobStorageProviderMock{
//             CreateStorageFunc: func(ctx context.Context, bs *v1alpha1.BlobStorage) (*BlobStorageInstance, error) {
// 	               panic("mock out the CreateStorage method")
//             },
//             DeleteStorageFunc: func(ctx context.Context, bs *v1alpha1.BlobStorage) error {
// 	               panic("mock out the DeleteStorage method")
//             },
//             GetNameFunc: func() string {
// 	               panic("mock out the GetName method")
//             },
//             SupportsStrategyFunc: func(s string) bool {
// 	               panic("mock out the SupportsStrategy method")
//             },
//         }
//
//         // use mockedBlobStorageProvider in code that requires BlobStorageProvider
//         // and then make assertions.
//
//     }
type BlobStorageProviderMock struct {
	// CreateStorageFunc mocks the CreateStorage method.
	CreateStorageFunc func(ctx context.Context, bs *v1alpha1.BlobStorage) (*BlobStorageInstance, error)

	// DeleteStorageFunc mocks the DeleteStorage method.
	DeleteStorageFunc func(ctx context.Context, bs *v1alpha1.BlobStorage) error

	// GetNameFunc mocks the GetName method.
	GetNameFunc func() string

	// SupportsStrategyFunc mocks the SupportsStrategy method.
	SupportsStrategyFunc func(s string) bool

	// calls tracks calls to the methods.
	calls struct {
		// CreateStorage holds details about calls to the CreateStorage method.
		CreateStorage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Bs is the bs argument value.
			Bs *v1alpha1.BlobStorage
		}
		// DeleteStorage holds details about calls to the DeleteStorage method.
		DeleteStorage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Bs is the bs argument value.
			Bs *v1alpha1.BlobStorage
		}
		// GetName holds details about calls to the GetName method.
		GetName []struct {
		}
		// SupportsStrategy holds details about calls to the SupportsStrategy method.
		SupportsStrategy []struct {
			// S is the s argument value.
			S string
		}
	}
}

// CreateStorage calls CreateStorageFunc.
func (mock *BlobStorageProviderMock) CreateStorage(ctx context.Context, bs *v1alpha1.BlobStorage) (*BlobStorageInstance, error) {
	if mock.CreateStorageFunc == nil {
		panic("BlobStorageProviderMock.CreateStorageFunc: method is nil but BlobStorageProvider.CreateStorage was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Bs  *v1alpha1.BlobStorage
	}{
		Ctx: ctx,
		Bs:  bs,
	}
	lockBlobStorageProviderMockCreateStorage.Lock()
	mock.calls.CreateStorage = append(mock.calls.CreateStorage, callInfo)
	lockBlobStorageProviderMockCreateStorage.Unlock()
	return mock.CreateStorageFunc(ctx, bs)
}

// CreateStorageCalls gets all the calls that were made to CreateStorage.
// Check the length with:
//     len(mockedBlobStorageProvider.CreateStorageCalls())
func (mock *BlobStorageProviderMock) CreateStorageCalls() []struct {
	Ctx context.Context
	Bs  *v1alpha1.BlobStorage
} {
	var calls []struct {
		Ctx context.Context
		Bs  *v1alpha1.BlobStorage
	}
	lockBlobStorageProviderMockCreateStorage.RLock()
	calls = mock.calls.CreateStorage
	lockBlobStorageProviderMockCreateStorage.RUnlock()
	return calls
}

// DeleteStorage calls DeleteStorageFunc.
func (mock *BlobStorageProviderMock) DeleteStorage(ctx context.Context, bs *v1alpha1.BlobStorage) error {
	if mock.DeleteStorageFunc == nil {
		panic("BlobStorageProviderMock.DeleteStorageFunc: method is nil but BlobStorageProvider.DeleteStorage was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Bs  *v1alpha1.BlobStorage
	}{
		Ctx: ctx,
		Bs:  bs,
	}
	lockBlobStorageProviderMockDeleteStorage.Lock()
	mock.calls.DeleteStorage = append(mock.calls.DeleteStorage, callInfo)
	lockBlobStorageProviderMockDeleteStorage.Unlock()
	return mock.DeleteStorageFunc(ctx, bs)
}

// DeleteStorageCalls gets all the calls that were made to DeleteStorage.
// Check the length with:
//     len(mockedBlobStorageProvider.DeleteStorageCalls())
func (mock *BlobStorageProviderMock) DeleteStorageCalls() []struct {
	Ctx context.Context
	Bs  *v1alpha1.BlobStorage
} {
	var calls []struct {
		Ctx context.Context
		Bs  *v1alpha1.BlobStorage
	}
	lockBlobStorageProviderMockDeleteStorage.RLock()
	calls = mock.calls.DeleteStorage
	lockBlobStorageProviderMockDeleteStorage.RUnlock()
	return calls
}

// GetName calls GetNameFunc.
func (mock *BlobStorageProviderMock) GetName() string {
	if mock.GetNameFunc == nil {
		panic("BlobStorageProviderMock.GetNameFunc: method is nil but BlobStorageProvider.GetName was just called")
	}
	callInfo := struct {
	}{}
	lockBlobStorageProviderMockGetName.Lock()
	mock.calls.GetName = append(mock.calls.GetName, callInfo)
	lockBlobStorageProviderMockGetName.Unlock()
	return mock.GetNameFunc()
}

// GetNameCalls gets all the calls that were made to GetName.
// Check the length with:
//     len(mockedBlobStorageProvider.GetNameCalls())
func (mock *BlobStorageProviderMock) GetNameCalls() []struct {
} {
	var calls []struct {
	}
	lockBlobStorageProviderMockGetName.RLock()
	calls = mock.calls.GetName
	lockBlobStorageProviderMockGetName.RUnlock()
	return calls
}

// SupportsStrategy calls SupportsStrategyFunc.
func (mock *BlobStorageProviderMock) SupportsStrategy(s string) bool {
	if mock.SupportsStrategyFunc == nil {
		panic("BlobStorageProviderMock.SupportsStrategyFunc: method is nil but BlobStorageProvider.SupportsStrategy was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	lockBlobStorageProviderMockSupportsStrategy.Lock()
	mock.calls.SupportsStrategy = append(mock.calls.SupportsStrategy, callInfo)
	lockBlobStorageProviderMockSupportsStrategy.Unlock()
	return mock.SupportsStrategyFunc(s)
}

// SupportsStrategyCalls gets all the calls that were made to SupportsStrategy.
// Check the length with:
//     len(mockedBlobStorageProvider.SupportsStrategyCalls())
func (mock *BlobStorageProviderMock) SupportsStrategyCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	lockBlobStorageProviderMockSupportsStrategy.RLock()
	calls = mock.calls.SupportsStrategy
	lockBlobStorageProviderMockSupportsStrategy.RUnlock()
	return calls
}

var (
	lockSMTPCredentialsProviderMockCreateSMTPCredentials sync.RWMutex
	lockSMTPCredentialsProviderMockDeleteSMTPCredentials sync.RWMutex
	lockSMTPCredentialsProviderMockGetName               sync.RWMutex
	lockSMTPCredentialsProviderMockSupportsStrategy      sync.RWMutex
)

// Ensure, that SMTPCredentialsProviderMock does implement SMTPCredentialsProvider.
// If this is not the case, regenerate this file with moq.
var _ SMTPCredentialsProvider = &SMTPCredentialsProviderMock{}

// SMTPCredentialsProviderMock is a mock implementation of SMTPCredentialsProvider.
//
//     func TestSomethingThatUsesSMTPCredentialsProvider(t *testing.T) {
//
//         // make and configure a mocked SMTPCredentialsProvider
//         mockedSMTPCredentialsProvider := &SMTPCredentialsProviderMock{
//             CreateSMTPCredentialsFunc: func(ctx context.Context, smtpCreds *v1alpha1.SMTPCredentialSet) (*SMTPCredentialSetInstance, error) {
// 	               panic("mock out the CreateSMTPCredentials method")
//             },
//             DeleteSMTPCredentialsFunc: func(ctx context.Context, smtpCreds *v1alpha1.SMTPCredentialSet) error {
// 	               panic("mock out the DeleteSMTPCredentials method")
//             },
//             GetNameFunc: func() string {
// 	               panic("mock out the GetName method")
//             },
//             SupportsStrategyFunc: func(s string) bool {
// 	               panic("mock out the SupportsStrategy method")
//             },
//         }
//
//         // use mockedSMTPCredentialsProvider in code that requires SMTPCredentialsProvider
//         // and then make assertions.
//
//     }
type SMTPCredentialsProviderMock struct {
	// CreateSMTPCredentialsFunc mocks the CreateSMTPCredentials method.
	CreateSMTPCredentialsFunc func(ctx context.Context, smtpCreds *v1alpha1.SMTPCredentialSet) (*SMTPCredentialSetInstance, error)

	// DeleteSMTPCredentialsFunc mocks the DeleteSMTPCredentials method.
	DeleteSMTPCredentialsFunc func(ctx context.Context, smtpCreds *v1alpha1.SMTPCredentialSet) error

	// GetNameFunc mocks the GetName method.
	GetNameFunc func() string

	// SupportsStrategyFunc mocks the SupportsStrategy method.
	SupportsStrategyFunc func(s string) bool

	// calls tracks calls to the methods.
	calls struct {
		// CreateSMTPCredentials holds details about calls to the CreateSMTPCredentials method.
		CreateSMTPCredentials []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SmtpCreds is the smtpCreds argument value.
			SmtpCreds *v1alpha1.SMTPCredentialSet
		}
		// DeleteSMTPCredentials holds details about calls to the DeleteSMTPCredentials method.
		DeleteSMTPCredentials []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SmtpCreds is the smtpCreds argument value.
			SmtpCreds *v1alpha1.SMTPCredentialSet
		}
		// GetName holds details about calls to the GetName method.
		GetName []struct {
		}
		// SupportsStrategy holds details about calls to the SupportsStrategy method.
		SupportsStrategy []struct {
			// S is the s argument value.
			S string
		}
	}
}

// CreateSMTPCredentials calls CreateSMTPCredentialsFunc.
func (mock *SMTPCredentialsProviderMock) CreateSMTPCredentials(ctx context.Context, smtpCreds *v1alpha1.SMTPCredentialSet) (*SMTPCredentialSetInstance, error) {
	if mock.CreateSMTPCredentialsFunc == nil {
		panic("SMTPCredentialsProviderMock.CreateSMTPCredentialsFunc: method is nil but SMTPCredentialsProvider.CreateSMTPCredentials was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		SmtpCreds *v1alpha1.SMTPCredentialSet
	}{
		Ctx:       ctx,
		SmtpCreds: smtpCreds,
	}
	lockSMTPCredentialsProviderMockCreateSMTPCredentials.Lock()
	mock.calls.CreateSMTPCredentials = append(mock.calls.CreateSMTPCredentials, callInfo)
	lockSMTPCredentialsProviderMockCreateSMTPCredentials.Unlock()
	return mock.CreateSMTPCredentialsFunc(ctx, smtpCreds)
}

// CreateSMTPCredentialsCalls gets all the calls that were made to CreateSMTPCredentials.
// Check the length with:
//     len(mockedSMTPCredentialsProvider.CreateSMTPCredentialsCalls())
func (mock *SMTPCredentialsProviderMock) CreateSMTPCredentialsCalls() []struct {
	Ctx       context.Context
	SmtpCreds *v1alpha1.SMTPCredentialSet
} {
	var calls []struct {
		Ctx       context.Context
		SmtpCreds *v1alpha1.SMTPCredentialSet
	}
	lockSMTPCredentialsProviderMockCreateSMTPCredentials.RLock()
	calls = mock.calls.CreateSMTPCredentials
	lockSMTPCredentialsProviderMockCreateSMTPCredentials.RUnlock()
	return calls
}

// DeleteSMTPCredentials calls DeleteSMTPCredentialsFunc.
func (mock *SMTPCredentialsProviderMock) DeleteSMTPCredentials(ctx context.Context, smtpCreds *v1alpha1.SMTPCredentialSet) error {
	if mock.DeleteSMTPCredentialsFunc == nil {
		panic("SMTPCredentialsProviderMock.DeleteSMTPCredentialsFunc: method is nil but SMTPCredentialsProvider.DeleteSMTPCredentials was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		SmtpCreds *v1alpha1.SMTPCredentialSet
	}{
		Ctx:       ctx,
		SmtpCreds: smtpCreds,
	}
	lockSMTPCredentialsProviderMockDeleteSMTPCredentials.Lock()
	mock.calls.DeleteSMTPCredentials = append(mock.calls.DeleteSMTPCredentials, callInfo)
	lockSMTPCredentialsProviderMockDeleteSMTPCredentials.Unlock()
	return mock.DeleteSMTPCredentialsFunc(ctx, smtpCreds)
}

// DeleteSMTPCredentialsCalls gets all the calls that were made to DeleteSMTPCredentials.
// Check the length with:
//     len(mockedSMTPCredentialsProvider.DeleteSMTPCredentialsCalls())
func (mock *SMTPCredentialsProviderMock) DeleteSMTPCredentialsCalls() []struct {
	Ctx       context.Context
	SmtpCreds *v1alpha1.SMTPCredentialSet
} {
	var calls []struct {
		Ctx       context.Context
		SmtpCreds *v1alpha1.SMTPCredentialSet
	}
	lockSMTPCredentialsProviderMockDeleteSMTPCredentials.RLock()
	calls = mock.calls.DeleteSMTPCredentials
	lockSMTPCredentialsProviderMockDeleteSMTPCredentials.RUnlock()
	return calls
}

// GetName calls GetNameFunc.
func (mock *SMTPCredentialsProviderMock) GetName() string {
	if mock.GetNameFunc == nil {
		panic("SMTPCredentialsProviderMock.GetNameFunc: method is nil but SMTPCredentialsProvider.GetName was just called")
	}
	callInfo := struct {
	}{}
	lockSMTPCredentialsProviderMockGetName.Lock()
	mock.calls.GetName = append(mock.calls.GetName, callInfo)
	lockSMTPCredentialsProviderMockGetName.Unlock()
	return mock.GetNameFunc()
}

// GetNameCalls gets all the calls that were made to GetName.
// Check the length with:
//     len(mockedSMTPCredentialsProvider.GetNameCalls())
func (mock *SMTPCredentialsProviderMock) GetNameCalls() []struct {
} {
	var calls []struct {
	}
	lockSMTPCredentialsProviderMockGetName.RLock()
	calls = mock.calls.GetName
	lockSMTPCredentialsProviderMockGetName.RUnlock()
	return calls
}

// SupportsStrategy calls SupportsStrategyFunc.
func (mock *SMTPCredentialsProviderMock) SupportsStrategy(s string) bool {
	if mock.SupportsStrategyFunc == nil {
		panic("SMTPCredentialsProviderMock.SupportsStrategyFunc: method is nil but SMTPCredentialsProvider.SupportsStrategy was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	lockSMTPCredentialsProviderMockSupportsStrategy.Lock()
	mock.calls.SupportsStrategy = append(mock.calls.SupportsStrategy, callInfo)
	lockSMTPCredentialsProviderMockSupportsStrategy.Unlock()
	return mock.SupportsStrategyFunc(s)
}

// SupportsStrategyCalls gets all the calls that were made to SupportsStrategy.
// Check the length with:
//     len(mockedSMTPCredentialsProvider.SupportsStrategyCalls())
func (mock *SMTPCredentialsProviderMock) SupportsStrategyCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	lockSMTPCredentialsProviderMockSupportsStrategy.RLock()
	calls = mock.calls.SupportsStrategy
	lockSMTPCredentialsProviderMockSupportsStrategy.RUnlock()
	return calls
}

var (
	lockPostgresProviderMockCreatePostgres   sync.RWMutex
	lockPostgresProviderMockDeletePostgres   sync.RWMutex
	lockPostgresProviderMockGetName          sync.RWMutex
	lockPostgresProviderMockSupportsStrategy sync.RWMutex
)

// Ensure, that PostgresProviderMock does implement PostgresProvider.
// If this is not the case, regenerate this file with moq.
var _ PostgresProvider = &PostgresProviderMock{}

// PostgresProviderMock is a mock implementation of PostgresProvider.
//
//     func TestSomethingThatUsesPostgresProvider(t *testing.T) {
//
//         // make and configure a mocked PostgresProvider
//         mockedPostgresProvider := &PostgresProviderMock{
//             CreatePostgresFunc: func(ctx context.Context, ps *v1alpha1.Postgres) (*PostgresInstance, error) {
// 	               panic("mock out the CreatePostgres method")
//             },
//             DeletePostgresFunc: func(ctx context.Context, ps *v1alpha1.Postgres) error {
// 	               panic("mock out the DeletePostgres method")
//             },
//             GetNameFunc: func() string {
// 	               panic("mock out the GetName method")
//             },
//             SupportsStrategyFunc: func(s string) bool {
// 	               panic("mock out the SupportsStrategy method")
//             },
//         }
//
//         // use mockedPostgresProvider in code that requires PostgresProvider
//         // and then make assertions.
//
//     }
type PostgresProviderMock struct {
	// CreatePostgresFunc mocks the CreatePostgres method.
	CreatePostgresFunc func(ctx context.Context, ps *v1alpha1.Postgres) (*PostgresInstance, error)

	// DeletePostgresFunc mocks the DeletePostgres method.
	DeletePostgresFunc func(ctx context.Context, ps *v1alpha1.Postgres) error

	// GetNameFunc mocks the GetName method.
	GetNameFunc func() string

	// SupportsStrategyFunc mocks the SupportsStrategy method.
	SupportsStrategyFunc func(s string) bool

	// calls tracks calls to the methods.
	calls struct {
		// CreatePostgres holds details about calls to the CreatePostgres method.
		CreatePostgres []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ps is the ps argument value.
			Ps *v1alpha1.Postgres
		}
		// DeletePostgres holds details about calls to the DeletePostgres method.
		DeletePostgres []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ps is the ps argument value.
			Ps *v1alpha1.Postgres
		}
		// GetName holds details about calls to the GetName method.
		GetName []struct {
		}
		// SupportsStrategy holds details about calls to the SupportsStrategy method.
		SupportsStrategy []struct {
			// S is the s argument value.
			S string
		}
	}
}

// CreatePostgres calls CreatePostgresFunc.
func (mock *PostgresProviderMock) CreatePostgres(ctx context.Context, ps *v1alpha1.Postgres) (*PostgresInstance, error) {
	if mock.CreatePostgresFunc == nil {
		panic("PostgresProviderMock.CreatePostgresFunc: method is nil but PostgresProvider.CreatePostgres was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ps  *v1alpha1.Postgres
	}{
		Ctx: ctx,
		Ps:  ps,
	}
	lockPostgresProviderMockCreatePostgres.Lock()
	mock.calls.CreatePostgres = append(mock.calls.CreatePostgres, callInfo)
	lockPostgresProviderMockCreatePostgres.Unlock()
	return mock.CreatePostgresFunc(ctx, ps)
}

// CreatePostgresCalls gets all the calls that were made to CreatePostgres.
// Check the length with:
//     len(mockedPostgresProvider.CreatePostgresCalls())
func (mock *PostgresProviderMock) CreatePostgresCalls() []struct {
	Ctx context.Context
	Ps  *v1alpha1.Postgres
} {
	var calls []struct {
		Ctx context.Context
		Ps  *v1alpha1.Postgres
	}
	lockPostgresProviderMockCreatePostgres.RLock()
	calls = mock.calls.CreatePostgres
	lockPostgresProviderMockCreatePostgres.RUnlock()
	return calls
}

// DeletePostgres calls DeletePostgresFunc.
func (mock *PostgresProviderMock) DeletePostgres(ctx context.Context, ps *v1alpha1.Postgres) error {
	if mock.DeletePostgresFunc == nil {
		panic("PostgresProviderMock.DeletePostgresFunc: method is nil but PostgresProvider.DeletePostgres was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ps  *v1alpha1.Postgres
	}{
		Ctx: ctx,
		Ps:  ps,
	}
	lockPostgresProviderMockDeletePostgres.Lock()
	mock.calls.DeletePostgres = append(mock.calls.DeletePostgres, callInfo)
	lockPostgresProviderMockDeletePostgres.Unlock()
	return mock.DeletePostgresFunc(ctx, ps)
}

// DeletePostgresCalls gets all the calls that were made to DeletePostgres.
// Check the length with:
//     len(mockedPostgresProvider.DeletePostgresCalls())
func (mock *PostgresProviderMock) DeletePostgresCalls() []struct {
	Ctx context.Context
	Ps  *v1alpha1.Postgres
} {
	var calls []struct {
		Ctx context.Context
		Ps  *v1alpha1.Postgres
	}
	lockPostgresProviderMockDeletePostgres.RLock()
	calls = mock.calls.DeletePostgres
	lockPostgresProviderMockDeletePostgres.RUnlock()
	return calls
}

// GetName calls GetNameFunc.
func (mock *PostgresProviderMock) GetName() string {
	if mock.GetNameFunc == nil {
		panic("PostgresProviderMock.GetNameFunc: method is nil but PostgresProvider.GetName was just called")
	}
	callInfo := struct {
	}{}
	lockPostgresProviderMockGetName.Lock()
	mock.calls.GetName = append(mock.calls.GetName, callInfo)
	lockPostgresProviderMockGetName.Unlock()
	return mock.GetNameFunc()
}

// GetNameCalls gets all the calls that were made to GetName.
// Check the length with:
//     len(mockedPostgresProvider.GetNameCalls())
func (mock *PostgresProviderMock) GetNameCalls() []struct {
} {
	var calls []struct {
	}
	lockPostgresProviderMockGetName.RLock()
	calls = mock.calls.GetName
	lockPostgresProviderMockGetName.RUnlock()
	return calls
}

// SupportsStrategy calls SupportsStrategyFunc.
func (mock *PostgresProviderMock) SupportsStrategy(s string) bool {
	if mock.SupportsStrategyFunc == nil {
		panic("PostgresProviderMock.SupportsStrategyFunc: method is nil but PostgresProvider.SupportsStrategy was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	lockPostgresProviderMockSupportsStrategy.Lock()
	mock.calls.SupportsStrategy = append(mock.calls.SupportsStrategy, callInfo)
	lockPostgresProviderMockSupportsStrategy.Unlock()
	return mock.SupportsStrategyFunc(s)
}

// SupportsStrategyCalls gets all the calls that were made to SupportsStrategy.
// Check the length with:
//     len(mockedPostgresProvider.SupportsStrategyCalls())
func (mock *PostgresProviderMock) SupportsStrategyCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	lockPostgresProviderMockSupportsStrategy.RLock()
	calls = mock.calls.SupportsStrategy
	lockPostgresProviderMockSupportsStrategy.RUnlock()
	return calls
}
